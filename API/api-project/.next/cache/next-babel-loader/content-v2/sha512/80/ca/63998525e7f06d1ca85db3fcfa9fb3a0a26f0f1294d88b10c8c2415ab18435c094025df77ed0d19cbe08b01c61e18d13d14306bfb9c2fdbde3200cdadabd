{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MongoClient } from \"mongodb\";\n\nconst handler = async (req, res) => {\n  const eventId = req.query.eventId;\n  const client = await MongoClient.connect('mongodb+srv://Me:long.217000@cluster0.b30e6.mongodb.net/events?retryWrites=true&w=majority');\n  const db = client.db();\n  const {\n    email,\n    name,\n    text\n  } = req.body;\n\n  switch (req.method) {\n    case 'POST':\n      if (!email.includes('@') || !name || name.trim() === '') {\n        return res.status(422).json({\n          message: 'Invalid input.'\n        });\n      }\n\n      const response = await db.collection('comment').insertOne(_objectSpread({\n        eventId\n      }, req.body));\n      console.log(response);\n      return res.status(201).json({\n        message: 'The comment is added',\n        comment: _objectSpread({\n          id: new Date().toISOString()\n        }, req.body)\n      });\n\n    case 'GET':\n      const dummyComments = [{\n        id: 'c1',\n        name: 'a',\n        comment: 'asdasd'\n      }, {\n        id: 'c2',\n        name: 'b',\n        comment: 'awerwer'\n      }, {\n        id: 'c3',\n        name: 'c',\n        comment: 'asdasd'\n      }];\n      return res.status(201).json({\n        message: 'All comments',\n        comments: dummyComments\n      });\n  }\n\n  client.close();\n};\n\nexport default handler;","map":{"version":3,"sources":["D:/Home studying/Courses/NextJs/API/api-project/pages/api/events/[eventId].js"],"names":["MongoClient","handler","req","res","eventId","query","client","connect","db","email","name","text","body","method","includes","trim","status","json","message","response","collection","insertOne","console","log","comment","id","Date","toISOString","dummyComments","comments","close"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAMC,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUD,OAA1B;AAEA,QAAME,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoB,4FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAwBT,GAAG,CAACU,IAAlC;;AACA,UAAQV,GAAG,CAACW,MAAZ;AACI,SAAK,MAAL;AACI,UAAI,CAACJ,KAAK,CAACK,QAAN,CAAe,GAAf,CAAD,IAAwB,CAACJ,IAAzB,IAAiCA,IAAI,CAACK,IAAL,OAAgB,EAArD,EAAyD;AACrD,eAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AAED,YAAMC,QAAQ,GAAG,MAAMX,EAAE,CAACY,UAAH,CAAc,SAAd,EAAyBC,SAAzB;AACnBjB,QAAAA;AADmB,SAEhBF,GAAG,CAACU,IAFY,EAAvB;AAKAU,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,aAAOhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,OAAO,EAAE,sBADe;AAExBM,QAAAA,OAAO;AACHC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AADD,WAEAzB,GAAG,CAACU,IAFJ;AAFiB,OAArB,CAAP;;AAOJ,SAAK,KAAL;AACI,YAAMgB,aAAa,GAAG,CAClB;AAAEH,QAAAA,EAAE,EAAE,IAAN;AAAYf,QAAAA,IAAI,EAAE,GAAlB;AAAuBc,QAAAA,OAAO,EAAE;AAAhC,OADkB,EAElB;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYf,QAAAA,IAAI,EAAE,GAAlB;AAAuBc,QAAAA,OAAO,EAAE;AAAhC,OAFkB,EAGlB;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYf,QAAAA,IAAI,EAAE,GAAlB;AAAuBc,QAAAA,OAAO,EAAE;AAAhC,OAHkB,CAAtB;AAKA,aAAOrB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,OAAO,EAAE,cADe;AAExBW,QAAAA,QAAQ,EAAED;AAFc,OAArB,CAAP;AA1BR;;AA+BAtB,EAAAA,MAAM,CAACwB,KAAP;AACH,CAvCD;;AAyCA,eAAe7B,OAAf","sourcesContent":["import { MongoClient } from \"mongodb\"\r\n\r\nconst handler = async (req, res) => {\r\n    const eventId = req.query.eventId\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://Me:long.217000@cluster0.b30e6.mongodb.net/events?retryWrites=true&w=majority')\r\n    const db = client.db()\r\n\r\n    const { email, name, text } = req.body\r\n    switch (req.method) {\r\n        case 'POST':\r\n            if (!email.includes('@') || !name || name.trim() === '') {\r\n                return res.status(422).json({ message: 'Invalid input.' })\r\n            }\r\n\r\n            const response = await db.collection('comment').insertOne({\r\n                eventId,\r\n                ...req.body\r\n            })\r\n\r\n            console.log(response)\r\n\r\n            return res.status(201).json({\r\n                message: 'The comment is added',\r\n                comment: {\r\n                    id: new Date().toISOString(),\r\n                    ...req.body\r\n                }\r\n            })\r\n        case 'GET':\r\n            const dummyComments = [\r\n                { id: 'c1', name: 'a', comment: 'asdasd' },\r\n                { id: 'c2', name: 'b', comment: 'awerwer' },\r\n                { id: 'c3', name: 'c', comment: 'asdasd' }\r\n            ]\r\n            return res.status(201).json({\r\n                message: 'All comments',\r\n                comments: dummyComments\r\n            })\r\n    }\r\n    client.close()\r\n}\r\n\r\nexport default handler"]},"metadata":{},"sourceType":"module"}