{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst connectDbs = async () => {\n  return await MongoClient.connect('mongodb+srv://Me:long.217000@cluster0.b30e6.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n};\n\nconst insertDocument = async (client, document) => {\n  const db = client.db();\n  await db.collection('emails').insertOne(document);\n};\n\nconst handler = async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      const email = req.body.email;\n\n      if (!email || !email.includes('@')) {\n        return res.status(422).json({\n          message: 'Invalid email address'\n        });\n      }\n\n      let client;\n\n      try {\n        const client = await connectDbs();\n      } catch (err) {\n        res.status(500).json({\n          message: 'Connecting to the database failed!'\n        });\n        return;\n      }\n\n      try {\n        await insertDocument(client, {\n          email: email\n        });\n        client.close();\n      } catch (err) {\n        return res.status(500).json({\n          message: 'Inserting to the database failed!'\n        });\n      }\n\n      return res.status(201).json({\n        message: 'Signed up'\n      });\n  }\n};\n\nexport default handler;","map":{"version":3,"sources":["D:/Home studying/Courses/NextJs/API/api-project/pages/api/index.js"],"names":["MongoClient","connectDbs","connect","insertDocument","client","document","db","collection","insertOne","handler","req","res","method","email","body","includes","status","json","message","err","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC3B,SAAO,MAAMD,WAAW,CAACE,OAAZ,CAAoB,qGAApB,CAAb;AACH,CAFD;;AAIA,MAAMC,cAAc,GAAG,OAAOC,MAAP,EAAeC,QAAf,KAA4B;AAC/C,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMA,EAAE,CAACC,UAAH,CAAc,QAAd,EAAwBC,SAAxB,CAAkCH,QAAlC,CAAN;AACH,CAHD;;AAKA,MAAMI,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,KAAK,GAAGH,GAAG,CAACI,IAAJ,CAASD,KAAvB;;AACA,UAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAf,EAAoC;AAChC,eAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AACD,UAAId,MAAJ;;AACA,UAAI;AACA,cAAMA,MAAM,GAAG,MAAMH,UAAU,EAA/B;AACH,OAFD,CAEE,OAAOkB,GAAP,EAAY;AACVR,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACA;AACH;;AACD,UAAI;AACA,cAAMf,cAAc,CAACC,MAAD,EAAS;AAAES,UAAAA,KAAK,EAAEA;AAAT,SAAT,CAApB;AACAT,QAAAA,MAAM,CAACgB,KAAP;AACH,OAHD,CAGE,OAAOD,GAAP,EAAY;AACV,eAAOR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AAED,aAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AApBR;AAsBH,CAvBD;;AAyBA,eAAeT,OAAf","sourcesContent":["import { MongoClient } from \"mongodb\"\r\n\r\nconst connectDbs = async () => {\r\n    return await MongoClient.connect('mongodb+srv://Me:long.217000@cluster0.b30e6.mongodb.net/myFirstDatabase?retryWrites=true&w=majority')\r\n}\r\n\r\nconst insertDocument = async (client, document) => {\r\n    const db = client.db()\r\n    await db.collection('emails').insertOne(document)\r\n}\r\n\r\nconst handler = async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            const email = req.body.email\r\n            if (!email || !email.includes('@')) {\r\n                return res.status(422).json({ message: 'Invalid email address' })\r\n            }\r\n            let client\r\n            try {\r\n                const client = await connectDbs()\r\n            } catch (err) {\r\n                res.status(500).json({ message: 'Connecting to the database failed!' })\r\n                return\r\n            }\r\n            try {\r\n                await insertDocument(client, { email: email })\r\n                client.close()\r\n            } catch (err) {\r\n                return res.status(500).json({ message: 'Inserting to the database failed!' })\r\n            }\r\n\r\n            return res.status(201).json({ message: 'Signed up' })\r\n    }\r\n}\r\n\r\nexport default handler"]},"metadata":{},"sourceType":"module"}